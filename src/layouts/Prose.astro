---
import Base from "./Base.astro";
import { dirname, basename } from "path";
import type { MarkdownHeading } from "astro";

const title =
  Astro.props.frontmatter !== undefined
    ? Astro.props.frontmatter.title
    : Astro.props.title;

let files = [];
if (Astro.props?.frontmatter?.title) {
  const parent_dir = dirname(Astro.props.frontmatter.file);

  try {
    files = await Astro.glob("../pages/**/*.mdx").then((mdx_documents) => {
      // find all files from same dir with same title
      return (
        mdx_documents
          .filter(
            (file) =>
              file.frontmatter.title === Astro.props.frontmatter.title &&
              dirname(file?.file || ".") === parent_dir
          )
          // sort by filename (will always prefer index.md as the lowest member)
          .sort((a, b) => {
            const a_file = basename(a.file),
              b_file = basename(b.file);

            // prefer index.md
            if (a_file.startsWith("index")) {
              return -1;
            }

            if (b_file.startsWith("index")) {
              return 1;
            }

            // otherwise sort by filename (asc)
            if (a_file > b_file) {
              return 1;
            }

            return a_file === b_file ? 0 : -1;
          })
          .map((file) => [
            file.url,
            file
            .getHeadings()
              // @ts-ignore - The type for MarkdownHeading is often not correcly inferred
              .filter((heading: MarkdownHeading) => heading.depth <= 2),
          ])
      );
    });
  } catch (e) {
    console.error("Failed to get files: ", e);
  }
}
---

<Base
  title={title}
  showToc={Astro.props?.frontmatter?.showToc}
  files={files}
  next={Astro.props?.frontmatter?.next}
>
  <div class="prose lg:prose-lg prose-slate prose-extension">
    <slot />
  </div>
</Base>

<script>
  import { copy_to_clipboard, run_playground } from "../lib/codetitle-helper";

  declare global {
    interface Window {
      copy_to_clipboard: any;
      run_playground: any;
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    window.copy_to_clipboard = copy_to_clipboard;
    window.run_playground = run_playground;
  });
</script>
